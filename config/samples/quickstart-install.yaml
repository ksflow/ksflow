############## Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: ksflow-quickstart

############## Certs
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: selfsigned-ca-issuer
  namespace: ksflow-quickstart
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: selfsigned-ca
  namespace: ksflow-quickstart
spec:
  isCA: true
  commonName: selfsigned-ca
  secretName: selfsigned-ca-root-secret
  privateKey:
    algorithm: ECDSA
    size: 256
  issuerRef:
    name: selfsigned-ca-issuer
    kind: Issuer
    group: cert-manager.io
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: cert-issuer
  namespace: ksflow-quickstart
spec:
  ca:
    secretName: selfsigned-ca-root-secret
---
apiVersion: v1
kind: Secret
metadata:
  name: kafka-cert-password
  namespace: ksflow-quickstart
stringData:
  password: "password"
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kafka-cert
  namespace: ksflow-quickstart
spec:
  secretName: kafka-cert
  privateKey:
    rotationPolicy: Always
  commonName: kafka.ksflow-quickstart.svc.cluster.local
  subject:
    countries:
    - "US"
    provinces:
    - "Ohio"
    localities:
    - "Columbus"
    organizations:
    - "Widgets Inc"
    organizationalUnits:
    - "Some Unit"
  keystores:
    jks:
      create: true
      passwordSecretRef:
        name: kafka-cert-password
        key: password
    pkcs12:
      create: true
      passwordSecretRef:
        name: kafka-cert-password
        key: password
  dnsNames:
  - kafka.ksflow-quickstart.svc.cluster.local
  issuerRef:
    name: cert-issuer
    kind: Issuer
    group: cert-manager.io
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: ksflow-controller-cert
  namespace: ksflow-quickstart
spec:
  secretName: ksflow-controller-cert
  privateKey:
    rotationPolicy: Always
  commonName: ksflow-controller.ksflow-quickstart.svc.cluster.local
  subject:
    countries:
    - "US"
    provinces:
    - "Ohio"
    localities:
    - "Columbus"
    organizations:
    - "Widgets Inc"
    organizationalUnits:
    - "Some Unit"
  dnsNames:
  - ksflow-controller.ksflow-quickstart.svc.cluster.local
  issuerRef:
    name: cert-issuer
    kind: Issuer
    group: cert-manager.io

############## Kafka
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: ksflow-quickstart
spec:
  ports:
  - protocol: TCP
    port: 9092
    name: main
  - protocol: TCP
    port: 9093
    name: controller
  selector:
    app: kafka
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-config
  namespace: ksflow-quickstart
data:
  # for easy use within container using kubectl exec (i.e. listing topics, acls, etc.)
  admin.properties: |
    bootstrap.servers=kafka.ksflow-quickstart.svc.cluster.local:9092
    security.protocol=SSL
    ssl.keystore.type=PKCS12
    ssl.keystore.location=/opt/bitnami/kafka/config/certs/kafka.keystore.p12
    ssl.keystore.password=password
    ssl.key.password=password
    ssl.truststore.type=PKCS12
    ssl.truststore.location=/opt/bitnami/kafka/config/certs/kafka.truststore.p12
    ssl.truststore.password=password
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: ksflow-quickstart
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: bitnami/kafka:3.3.1-debian-11-r19
        env:
        - name: BITNAMI_DEBUG
          value: "yes"
        - name: KAFKA_ENABLE_KRAFT
          value: "yes"
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_CFG_PROCESS_ROLES
          value: "broker,controller"
        - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
          value: "CONTROLLER"
        - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
          value: "SSL:SSL,CONTROLLER:SSL"
        - name: KAFKA_CFG_ADVERTISED_LISTENERS
          value: "SSL://kafka.ksflow-quickstart.svc.cluster.local:9092"
        - name: KAFKA_CFG_EARLY_START_LISTENERS
          value: CONTROLLER
        # TODO: configure ksflow controller as a non-superuser ACL administrator instead
        # ref: https://docs.confluent.io/platform/current/kafka/authorization.html#creating-non-super-user-acl-administrators
        - name: KAFKA_CFG_SUPER_USERS
          value: "User:CN=kafka.ksflow-quickstart.svc.cluster.local,OU=Some Unit,O=Widgets Inc,L=Columbus,ST=Ohio,C=US;User:CN=ksflow-controller.ksflow-quickstart.svc.cluster.local,OU=Some Unit,O=Widgets Inc,L=Columbus,ST=Ohio,C=US"
        - name: KAFKA_CFG_LISTENERS
          value: "SSL://:9092,CONTROLLER://:9093"
        - name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
          value: "SSL"
        - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
          value: "1@kafka.ksflow-quickstart.svc.cluster.local:9093"
        - name: KAFKA_CFG_SSL_KEYSTORE_TYPE
          value: "PKCS12"
        - name: KAFKA_CFG_SSL_KEYSTORE_LOCATION
          value: "/opt/bitnami/kafka/config/certs/kafka.keystore.p12"
        - name: KAFKA_CFG_SSL_KEYSTORE_PASSWORD
          value: "password"
        - name: KAFKA_CFG_SSL_KEY_PASSWORD
          value: "password"
        - name: KAFKA_CFG_SSL_TRUSTSTORE_TYPE
          value: "PKCS12"
        - name: KAFKA_CFG_SSL_TRUSTSTORE_LOCATION
          value: "/opt/bitnami/kafka/config/certs/kafka.truststore.p12"
        - name: KAFKA_CFG_SSL_TRUSTSTORE_PASSWORD
          value: "password"
        - name: KAFKA_CFG_SSL_ENABLED_PROTOCOLS
          value: "TLSv1.2"
        - name: KAFKA_CFG_SSL_PROTOCOL
          value: "TLSv1.2"
        - name: KAFKA_CFG_SSL_CLIENT_AUTH
          value: "required"
        - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
          value: "false"
        - name: KAFKA_CFG_ALLOW_EVERYONE_IF_NO_ACL_FOUND
          value: "false"
        - name: KAFKA_CFG_AUTHORIZER_CLASS_NAME
          value: "org.apache.kafka.metadata.authorizer.StandardAuthorizer"
        ports:
        - containerPort: 9092
          name: main
        - containerPort: 9093
          name: controller
        livenessProbe:
          tcpSocket:
            port: 9092
        resources:
          limits:
            memory: 256Mi
          requests:
            cpu: 200m
        volumeMounts:
        - mountPath: /opt/bitnami/kafka/config/certs/kafka.truststore.p12
          subPath: truststore.p12
          name: kafka-cert
        - mountPath: /opt/bitnami/kafka/config/certs/kafka.keystore.p12
          subPath: keystore.p12
          name: kafka-cert
        - mountPath: /opt/bitnami/kafka/config/admin.properties
          subPath: admin.properties
          name: kafka-config
        # JKS files are unused, but bitnami docker does checks on these & doesn't allow setting checks for P12
        - mountPath: /opt/bitnami/kafka/config/certs/kafka.truststore.jks
          subPath: truststore.jks
          name: kafka-cert
        - mountPath: /opt/bitnami/kafka/config/certs/kafka.keystore.jks
          subPath: keystore.jks
          name: kafka-cert
      volumes:
      - secret:
          secretName: kafka-cert
        name: kafka-cert
      - configMap:
          name: kafka-config
        name: kafka-config

############## Ksflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ksflow-controller
  namespace: ksflow-quickstart
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ksflow-controller
  namespace: ksflow-quickstart
data:
  controller-config.yaml: |
    apiVersion: ksflow.io/v1alpha1
    kind: KsflowConfig
    kafkaConnection:
      bootstrapServers:
      - kafka.ksflow-quickstart.svc.cluster.local:9092
      tls:
        cert: "/kafka-certs/tls.crt"
        key: "/kafka-certs/tls.key"
        ca: "/kafka-certs/ca.crt"
    kafkaTopicDefaults:
      reclaimPolicy: Delete
      partitions: 1
      replicationFactor: 1
      configs: {}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ksflow-controller
  namespace: ksflow-quickstart
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ksflow-controller
subjects:
  - kind: ServiceAccount
    name: ksflow-controller
    namespace: ksflow-quickstart
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ksflow-controller
  namespace: ksflow-quickstart
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: ksflow-controller
  template:
    metadata:
      labels:
        app: ksflow-controller
    spec:
      serviceAccountName: ksflow-controller
      containers:
      - name: controller
        image: ksflow/ksflow:latest
        imagePullPolicy: IfNotPresent
        args:
        - --config=/etc/ksflow/controller-config.yaml
        volumeMounts:
        - mountPath: /etc/ksflow
          name: controller-config
          readOnly: true
        - mountPath: /kafka-certs
          name: kafka-certs
          readOnly: true
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
        resources:
          limits:
            memory: 128Mi
          requests:
            cpu: 50m
      volumes:
      - configMap:
          name: ksflow-controller
        name: controller-config
      - secret:
          secretName: ksflow-controller-cert
        name: kafka-certs

############## Ksflow CRDs
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ksflow-controller
  namespace: ksflow-quickstart
rules:
  - apiGroups:
    - ksflow.io
    resources:
    - clusterkafkatopics
    - clusterkafkatopics/status
    - kafkatopics
    - kafkatopics/status
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
---
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: clusterkafkatopics.ksflow.io
spec:
  group: ksflow.io
  names:
    kind: ClusterKafkaTopic
    listKind: ClusterKafkaTopicList
    plural: clusterkafkatopics
    shortNames:
      - ckt
    singular: clusterkafkatopic
  scope: Cluster
  versions:
    - additionalPrinterColumns:
        - jsonPath: .spec.partitions
          name: Partitions
          type: string
        - jsonPath: .spec.replicationFactor
          name: Replicas
          type: string
        - jsonPath: .spec.reclaimPolicy
          name: ReclaimPolicy
          type: string
        - jsonPath: .status.phase
          name: Status
          type: string
        - jsonPath: .status.reason
          name: Reason
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ClusterKafkaTopic is the Schema for the clusterkafkatopics API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: KafkaTopicSpec defines the desired state of KafkaTopic
              properties:
                configs:
                  additionalProperties:
                    type: string
                  description: 'Configs contains the configs for the topic, see: https://kafka.apache.org/documentation/#topicconfigs
                  All values are specified as strings'
                  type: object
                partitions:
                  description: Partitions is the number of partitions in the topic.
                  format: int32
                  minimum: 1
                  type: integer
                reclaimPolicy:
                  description: ReclaimPolicy defines what should happen to the underlying
                    kafka topic if the KafkaTopic is deleted.
                  enum:
                    - Delete
                    - Retain
                  type: string
                replicationFactor:
                  description: ReplicationFactor is the number of replicas for each
                    of the topic's partitions.
                  minimum: 1
                  type: integer
              type: object
            status:
              description: KafkaTopicStatus defines the observed state of KafkaTopic
              properties:
                configs:
                  additionalProperties:
                    type: string
                  description: 'Configs contains the configs for the topic, see: https://kafka.apache.org/documentation/#topicconfigs
                  All values are specified as strings'
                  type: object
                lastUpdated:
                  format: date-time
                  type: string
                partitions:
                  description: Partitions is the number of partitions in the topic.
                  format: int32
                  minimum: 1
                  type: integer
                phase:
                  description: KafkaTopicPhase defines the phase of the KafkaTopic
                  enum:
                    - ""
                    - Updating
                    - Deleting
                    - Available
                    - Error
                  type: string
                reason:
                  type: string
                reclaimPolicy:
                  enum:
                    - Delete
                    - Retain
                  type: string
                replicationFactor:
                  description: ReplicationFactor is the number of replicas for each
                    of the topic's partitions.
                  minimum: 1
                  type: integer
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: kafkatopics.ksflow.io
spec:
  group: ksflow.io
  names:
    kind: KafkaTopic
    listKind: KafkaTopicList
    plural: kafkatopics
    shortNames:
      - kt
    singular: kafkatopic
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.partitions
          name: Partitions
          type: string
        - jsonPath: .status.replicationFactor
          name: Replicas
          type: string
        - jsonPath: .status.reclaimPolicy
          name: ReclaimPolicy
          type: string
        - jsonPath: .status.phase
          name: Status
          type: string
        - jsonPath: .status.reason
          name: Reason
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: KafkaTopic is the Schema for the kafkatopics API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: KafkaTopicSpec defines the desired state of KafkaTopic
              properties:
                configs:
                  additionalProperties:
                    type: string
                  description: 'Configs contains the configs for the topic, see: https://kafka.apache.org/documentation/#topicconfigs
                  All values are specified as strings'
                  type: object
                partitions:
                  description: Partitions is the number of partitions in the topic.
                  format: int32
                  minimum: 1
                  type: integer
                reclaimPolicy:
                  description: ReclaimPolicy defines what should happen to the underlying
                    kafka topic if the KafkaTopic is deleted.
                  enum:
                    - Delete
                    - Retain
                  type: string
                replicationFactor:
                  description: ReplicationFactor is the number of replicas for each
                    of the topic's partitions.
                  minimum: 1
                  type: integer
              type: object
            status:
              description: KafkaTopicStatus defines the observed state of KafkaTopic
              properties:
                configs:
                  additionalProperties:
                    type: string
                  description: 'Configs contains the configs for the topic, see: https://kafka.apache.org/documentation/#topicconfigs
                  All values are specified as strings'
                  type: object
                lastUpdated:
                  format: date-time
                  type: string
                partitions:
                  description: Partitions is the number of partitions in the topic.
                  format: int32
                  minimum: 1
                  type: integer
                phase:
                  description: KafkaTopicPhase defines the phase of the KafkaTopic
                  enum:
                    - ""
                    - Updating
                    - Deleting
                    - Available
                    - Error
                  type: string
                reason:
                  type: string
                reclaimPolicy:
                  enum:
                    - Delete
                    - Retain
                  type: string
                replicationFactor:
                  description: ReplicationFactor is the number of replicas for each
                    of the topic's partitions.
                  minimum: 1
                  type: integer
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
